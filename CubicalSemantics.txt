-*- org -*-

We interpret terms as hypercubes. So values depend on a list of colors
(χ) in addition to an environment of values (ρ).

⟦x⟧ρχ = ρ(x,χ)
⟦t.i⟧ρχ = ⟦t⟧(extend ρ)(χ,i)
⟦a,ᵢ p⟧ρχ = ⟦a⟧ρχ      if i ∉ χ
          = ⟦p⟧ρ(χ-i)  if i ∈ χ
⟦λx:A.t⟧ρχ = (for every o ⊆ χ) λxₒ. ⟦t⟧(ρ,(o,xₒ))χ
⟦f a⟧ρχ = (for every o ⊆ χ) ⟦f⟧ρχ ⟦f⟧ρo
⟦∀x:A. B⟧ρχ = (for every o ⊆ χ)(for every i ⊂ χ)
              λfᵢ. ∀xₒ:⟦A⟧ρo. ⟦B⟧(ρ,(o,xₒ))χ (fᵢ xᵢ)

(note the strict inclusion)

The way to extend the context ρ is given by the number of colors already present in χ.

if zero, we extend the context normally:

a : T      yields aᵢ : Tᵢ a
p : Tⱼ a   yields pᵢ : Tⱼᵢ a aᵢ p
etc.

if one, we extend the context using shifted parametricity:

a : T      yields aᵢ : Tᵢ a
p : Tⱼ a   yields pᵢ : Tᵢⱼ a p aᵢ

and so on for any number of colors.


-----------------

Actually, it should be "easy" to pre-extend the context. That is, when
we put a variable in the context, we also put the evaluations with
fresh variables:

⟦λx:A.t⟧ρχ = (for every o ⊆ φ) λxₒ. ⟦t⟧(ρ,(o,xₒ))χ
⟦f a⟧ρχ = (for every o ⊆ φ) ⟦f⟧ρχ ⟦f⟧ρo
⟦∀x:A. B⟧ρχ = (for every o ⊆ φ)(for every i ⊂ χ)
              λfᵢ. ∀xₒ:⟦A⟧ρo. ⟦B⟧(ρ,(o,xₒ))χ (fᵢ xᵢ)

where φ is the list χ extended with an infinite list of fresh colors.

Interpreting parametricity (.i) is then just the allocation of a fresh
variable to i:

⟦t.i⟧ρχ = ⟦t⟧(ρ[i/fresh₁])(χ,i)

The other rules do not change:

⟦x⟧ρχ = ρ(x,χ)
⟦a,ᵢ p⟧ρχ = ⟦a⟧ρχ      if i ∉ χ
          = ⟦p⟧ρ(χ-i)  if i ∈ χ

------------------------------

The above is not quite right; one has to fiddle a little bit to not
obtain infinitary nesting of abstractions, etc. A better way is:


⟦λx:A.t⟧ρχ = (for every o ⊆ χ) λ(xₒ: ⟦⟧). ⟦t⟧(ρ,(o,xₒ))χ

=================================================================

In sum:

⟦x⟧ρ = ρ(x)
⟦t.i⟧ρχ = ⟦t⟧(ρ[i/fresh₁])(χ,i)
⟦a,ᵢ p⟧ρχ = ⟦a⟧ρχ      if i ∉ χ
          = ⟦p⟧ρ(χ-i)  if i ∈ χ
⟦λx:A.t⟧ρχ = (for every o ⊆ χ) λxₒ. ⟦t⟧(ρ,(o,xₒ))χ
⟦f a⟧ρχ = (for every o ⊆ χ) ⟦f⟧ρχ ⟦f⟧ρo
⟦∀x:A. B⟧ρχ = (for every o ⊆ χ)(for every i ⊂ χ)(for every p ⊂ o)
              λfᵢ. ∀xₒ:⟦A⟧ρo ∙ xₚ. ⟦B⟧(ρ,x ↦ cube(xₒ))χ (fᵢ xᵢ)


However, this assumes that each variable is given multiple parametric interpretations for each color set:

xᵢⱼ is (a priori) unrelated to xⱼᵢ

The relation between those objects is requiried by the computational rules of the form

(a,ᵢp).j

==================================================

⟦x⟧ρ = ρ(x)
⟦U⟧ρχ = (for every i ⊂ χ) (for every i ⊂ o) λXᵢ:⟦U⟧ρ. (xᵢ : Xᵢ ∙ xₒ) → U
⟦λx:A.t⟧ρχ = (for every o ⊆ χ) λxₒ. ⟦t⟧(ρ,(o,xₒ))χ
⟦f a⟧ρχ = (for every o ⊆ χ) ⟦f⟧ρχ ⟦f⟧ρo
⟦∀x:A. B⟧ρχ = (for every o ⊆ χ)(for every i ⊂ χ)(for every p ⊂ o)
              λfᵢ. ∀xₒ:⟦A⟧ρo ∙ xₚ. ⟦B⟧(ρ,x ↦ cube(xₒ))χ (fᵢ xᵢ)
⟦t(ηni)⟧ρχ = ⟦t⟧(ρ[i/freshₙ])(insert n i χ)
⟦a,ᵢ p⟧ρχ = ⟦a⟧ρχ      if i ∉ χ
          = ⟦p⟧ρχ  if i ∈ χ


χ is a list of colors (order matters)

In the environment, we map couples (var,list of colors) to values.
The color lists in the environment are of the following form:
 - Colors are picked from the set χ∪{'}. That is, we also allow for an
   extra fresh/anonymous color (written '), which may occur anywhere
   and multiple times.
 - Non anonymous colors occur at most once. The list of non-anonymous
   variables must be a sublist of χ.
(All sublists of the above form must be mapped to a value.)

Example:

| Term      | ρ(a)                                                 | ρ(p)                                          |                                                  |
|-----------+------------------------------------------------------+-----------------------------------------------+--------------------------------------------------|
| (a,i p).j | (x:A, x':A'x, x'':A'' x x' x', ...)                  | (yⁱ:Aⁱ x, yⁱ':Aⁱ' x x' yⁱ,  y'ⁱ:A'ⁱ x yⁱ x' ) | (xⁱ will always be ignored so I do not write it) |
| (a,i p)   | (x:A, xʲ:Aʲx, x'ʲ:A'ʲ x x' xʲ, xʲ':Aʲ' x xʲ x', ...) | (yⁱ:Aⁱ x, yⁱʲ:Aⁱʲ x x' yⁱ,  yʲⁱ:Aʲⁱ x yⁱ xʲ ) |                                                  |
| a         | (x:A, xʲ:Aʲx, x'ʲ:A'ʲ x x' xʲ, xʲ':Aʲ' x xʲ x', ...) |                                               |                                                  |
| p         |                                                      | (y:Aⁱ x, yʲ:Aʲ x yⁱ xʲ )                      | {select only the subenv where i is last}         |
|           |                                                      |                                               |                                                  |


So, we get the final values:

| χ  | value |
|----+-------|
| —  | x     |
| i  | y     |
| j  | xʲ    |
| ij | yʲ    |

Which is "well typed".

It is a bit ugly that we have to have i (and all free colors) in all
positions, only to ignore all but those where i is last. This is
because we allow, in the syntax, to build cubes in whatever order.
Maybe it is not necessary to be so permissive.
