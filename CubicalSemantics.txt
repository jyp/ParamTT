-*- org -*-

⟦x⟧ρ = ρ(x)
⟦U⟧ρχ = (for every i ⊂ χ) (for every i ⊂ o) λXᵢ:⟦U⟧ρ. (xᵢ : Xᵢ ∙ xₒ) → U
⟦λx:A.t⟧ρχ = (for every o ⊆ χ) λxₒ. ⟦t⟧(ρ,(o,xₒ))χ
⟦f a⟧ρχ = (for every o ⊆ χ) ⟦f⟧ρχ ⟦f⟧ρo
⟦∀x:A. B⟧ρχ = (for every o ⊆ χ)(for every i ⊂ χ)(for every p ⊂ o)
              λfᵢ. ∀xₒ:⟦A⟧ρo ∙ xₚ. ⟦B⟧(ρ,x ↦ cube(xₒ))χ (fᵢ xᵢ)
⟦t(ηni)⟧ρχ = ⟦t⟧(ρ[i/ⁿ])(insert n i χ)
⟦a,ᵢ p⟧ρχ = ⟦a⟧ρχ      if i ∉ χ
          = ⟦p⟧ρ(χ-i)  if i ∈ χ   -- see example for what this means


In the environment, we map couples (var,list of colors) to values.
The color lists in the environment are of the following form:
 - Colors are picked from the list {ⁿ,...,²,¹}+χ. That is, we also allow for an
   extra fresh/anonymous color (written ²), which may occur anywhere
   and multiple times.
 - Non anonymous colors occur at most once. The list of non-anonymous
   variables must be a sublist of χ.
(All sublists of the above form must be mapped to a value.)

A type is interpreted as:

A : Set
Aⁱ : A → Set;  A¹ : A → Set; ...  (all sublists of size 1 of {n,...2,1,i})
A¹ⁱ : (x:A) → Aⁱ x → A¹ x → Set; A²¹ : (x:A) → A¹ x → A² x → Set;  (all sublists of size 2 of {n,...2,1,i})
...

(the arguments come in the same order as in the syntax)

Property of the env: if x:T ∈ Γ, then ρ(x)χ : ⟦T⟧ρχ ∙ ρ(x)i (for every i ⊂ χ)

Example:

assume p : A.i a

evaluate A.i for various χ:

| χ   |            |            |      |
|-----+------------+------------+------|
| ∅   | ⟦A.i⟧∅     | ⟦A⟧(i)     | Aⁱ   |
| 1   | ⟦A.i⟧(1)   | ⟦A⟧(1,i)   | A¹ⁱ  |
| 2   | ⟦A.i⟧(2)   | ⟦A⟧(2,i)   | A²ⁱ  |
| 2,1 | ⟦A.i⟧(2,1) | ⟦A⟧(2,1,i) | A²¹ⁱ |
| ... |            |            |      |


| Term      | ρ(a)                                | ρ(p)                      |       |                            |
|-----------+-------------------------------------+---------------------------+-------+----------------------------|
| (a,i p).j | (x:A, x¹:A¹x, x²¹:A²¹ x x¹ x², ...) | (y:Aⁱ x, y¹:A¹ⁱ x y x¹  ) | χ     |                            |
| (a,i p)   | (x:A, xʲ:Aʲx, x¹ʲ:A¹ʲ x xʲ x¹, ...) | (y:Aⁱ x, yʲ:Aʲⁱ x y xʲ )  | χ,j   | apply subst in ρ: j/1; 1/2 |
| a         | (x:A, xʲ:Aʲx, x¹ʲ:A¹ʲ x xʲ x¹, ...) |                           | χ,j   |                            |
| p         |                                     | (y:Aⁱ x, yʲ:Aʲⁱ x y xʲ )  | χ-i,j |                            |


So, we get the final values:

| χ | value         |
|---+---------------|
| ∅ | xʲ:Aʲx        |
| i | yʲ:Aʲⁱ x y xʲ |

Which is "well typed".

Let's repeat the process with the reduct:  (a.j ,i p(η2j))
(We do only p(η2j), the rest is boring)

| Term   | ρ(p)                                                                 |   |                                 |
|--------+----------------------------------------------------------------------+---+---------------------------------|
| p(η2j) | (y:Aⁱ x, y¹:A¹ⁱ x y x¹, y²: A²ⁱ x y x²; y²¹:A²¹ⁱ x y x¹ x² y² x²¹  ) | χ |                                 |
| p      | (y:Aⁱ x, y¹:A¹ⁱ x y x¹, yʲ: Aʲⁱ x y xʲ; yʲ¹:Aʲ¹ⁱ x y x¹ xʲ yʲ xʲ¹  ) | χ | apply subst in ρ: j/2; 2/3; ... |

--> and we get the same value.

=============================
-- Older, "bad" versions follow


We interpret terms as hypercubes. So values depend on a set of colors
(χ) in addition to an environment of values (ρ).


⟦x⟧ρ = ρ(x)
⟦U⟧ρχ = (for every i ⊂ χ) (for every i ⊂ o) λXᵢ:⟦U⟧ρ. (xᵢ : Xᵢ ∙ xₒ) → U
⟦λx:A.t⟧ρχ = (for every o ⊆ χ) λxₒ. ⟦t⟧(ρ,(o,xₒ))χ
⟦f a⟧ρχ = (for every o ⊆ χ) ⟦f⟧ρχ ⟦f⟧ρo
⟦∀x:A. B⟧ρχ = (for every o ⊆ χ)(for every i ⊂ χ)(for every p ⊂ o)
              λfᵢ. ∀xₒ:⟦A⟧ρo ∙ xₚ. ⟦B⟧(ρ,x ↦ cube(xₒ))χ (fᵢ xᵢ)
⟦t(ηni)⟧ρχ = ⟦t⟧(ρ[i/freshₙ])(χ+i)
⟦a,ᵢ p⟧ρχ = ⟦a⟧ρχ           if i ∉ χ
          = ⟦p⟧(ρ(i))(χ-i)  if i ∈ χ 
⟦ΨP⟧ρχ = ⟦P⟧ρχ
⟦P ∋ a⟧ρχ = ⟦P⟧ρχ ⟦a⟧ρχ 


Development of ΨP:

Assume 

  P : A -> U
--------------
 ΨP : U ∋ᵢ A

ΨP(∅) = P(∅)    (type: A(∅) -> Set )

ΨP(i) = P(i)  -- but arguments are in another order
...


χ is a set of colors

In the environment, we map couples (var,set of colors) to values.
The color sets in the environment are of the following form:
 - Colors are picked from the set χ∪{',',...}. That is, we also allow for an
   extra fresh/anonymous color (written '), which may occur  multiple times.
 - Non anonymous colors occur at most once. The set of non-anonymous
   variables must be a subset of χ.
(All sets of the above form must be mapped to a value.)

ρ(i) is the restriction of the environment to i. That is, for each value v(χ) in ρ,
we replace it by v(χ,i)


Example:


| Term      | ρ(a)                                | ρ(p)                        |
|-----------+-------------------------------------+-----------------------------|
| (a,i p).j | (x:A, x':A'x, x'':A'' x x' x', ...) | (yⁱ:Aⁱ x, yⁱ':Aⁱ' x x' yⁱ ) |
| (a,i p)   | (x:A, xʲ:Aʲx, x'ʲ:A'ʲ x x' xʲ, ...) | (yⁱ:Aⁱ x, yⁱʲ:Aⁱʲ x xʲ yⁱ ) |
| a         | (x:A, xʲ:Aʲx, x'ʲ:A'ʲ x x' xʲ, ...) |                             |
| p         |                                     | (y:Aⁱ x, yʲ:Aⁱʲ x yⁱ xʲ )   |
|           |                                     |                             |

(*) values xᴵ where i ∈ I will always be ignored, so I do not write
them. Dually, yᴵ where i ∉ I will always be ignored, so I write only
those with i.

The arguments should be associated a color set to indicate the
position where they should go. For concision these are omitted.

So, we get the final value:

| χ   | value | "type"      |
|-----+-------+-------------|
| —   | x     | A           |
| i   | y     | Aⁱ x        |
| j   | xʲ    | Aʲ x        |
| ij  | yʲ    | Aⁱʲ x yⁱ xʲ |
| ... |       |             |

Which is a "good" cube


================================

We interpret terms as hypercubes. So values depend on a list of colors
(χ) in addition to an environment of values (ρ).

⟦x⟧ρχ = ρ(x,χ)
⟦t.i⟧ρχ = ⟦t⟧(extend ρ)(χ,i)
⟦a,ᵢ p⟧ρχ = ⟦a⟧ρχ      if i ∉ χ
          = ⟦p⟧ρ(χ-i)  if i ∈ χ
⟦λx:A.t⟧ρχ = (for every o ⊆ χ) λxₒ. ⟦t⟧(ρ,(o,xₒ))χ
⟦f a⟧ρχ = (for every o ⊆ χ) ⟦f⟧ρχ ⟦f⟧ρo
⟦∀x:A. B⟧ρχ = (for every o ⊆ χ)(for every i ⊂ χ)
              λfᵢ. ∀xₒ:⟦A⟧ρo. ⟦B⟧(ρ,(o,xₒ))χ (fᵢ xᵢ)

(note the strict inclusion)

The way to extend the context ρ is given by the number of colors already present in χ.

if zero, we extend the context normally:

a : T      yields aᵢ : Tᵢ a
p : Tⱼ a   yields pᵢ : Tⱼᵢ a aᵢ p
etc.

if one, we extend the context using shifted parametricity:

a : T      yields aᵢ : Tᵢ a
p : Tⱼ a   yields pᵢ : Tᵢⱼ a p aᵢ

and so on for any number of colors.


-----------------

Actually, it should be "easy" to pre-extend the context. That is, when
we put a variable in the context, we also put the evaluations with
fresh variables:

⟦λx:A.t⟧ρχ = (for every o ⊆ φ) λxₒ. ⟦t⟧(ρ,(o,xₒ))χ
⟦f a⟧ρχ = (for every o ⊆ φ) ⟦f⟧ρχ ⟦f⟧ρo
⟦∀x:A. B⟧ρχ = (for every o ⊆ φ)(for every i ⊂ χ)
              λfᵢ. ∀xₒ:⟦A⟧ρo. ⟦B⟧(ρ,(o,xₒ))χ (fᵢ xᵢ)

where φ is the list χ extended with an infinite list of fresh colors.

Interpreting parametricity (.i) is then just the allocation of a fresh
variable to i:

⟦t.i⟧ρχ = ⟦t⟧(ρ[i/fresh₁])(χ,i)

The other rules do not change:

⟦x⟧ρχ = ρ(x,χ)
⟦a,ᵢ p⟧ρχ = ⟦a⟧ρχ      if i ∉ χ
          = ⟦p⟧ρ(χ-i)  if i ∈ χ

------------------------------

The above is not quite right; one has to fiddle a little bit to not
obtain infinitary nesting of abstractions, etc. A better way is:


⟦λx:A.t⟧ρχ = (for every o ⊆ χ) λ(xₒ: ⟦⟧). ⟦t⟧(ρ,(o,xₒ))χ

=================================================================

In sum:

⟦x⟧ρ = ρ(x)
⟦t.i⟧ρχ = ⟦t⟧(ρ[i/fresh₁])(χ,i)
⟦a,ᵢ p⟧ρχ = ⟦a⟧ρχ      if i ∉ χ
          = ⟦p⟧ρ(χ-i)  if i ∈ χ
⟦λx:A.t⟧ρχ = (for every o ⊆ χ) λxₒ. ⟦t⟧(ρ,(o,xₒ))χ
⟦f a⟧ρχ = (for every o ⊆ χ) ⟦f⟧ρχ ⟦f⟧ρo
⟦∀x:A. B⟧ρχ = (for every o ⊆ χ)(for every i ⊂ χ)(for every p ⊂ o)
              λfᵢ. ∀xₒ:⟦A⟧ρo ∙ xₚ. ⟦B⟧(ρ,x ↦ cube(xₒ))χ (fᵢ xᵢ)


However, this assumes that each variable is given multiple parametric interpretations for each color set:

xᵢⱼ is (a priori) unrelated to xⱼᵢ

The relation between those objects is requiried by the computational rules of the form

(a,ᵢp).j

